//! 🥁🥁🥁 This file has been auto generated by the Beet router.
//! 🥁🥁🥁 Any changes will be overridden if the file is regenerated.
pub mod helloworld;
pub mod counter;
pub mod contributing;
pub mod index;
pub const HELLOWORLD: &'static str = "/helloworld";
pub const COUNTER: &'static str = "/counter";
pub const CONTRIBUTING: &'static str = "/contributing";
pub const INDEX: &'static str = "/";
use beet::prelude::*;
#[allow(unused_imports)]
use crate as beet_site;
#[cfg(not(target_arch = "wasm32"))]
pub fn collect() -> RouteTree<beet::prelude::StaticRoute> {
    RouteTree {
        mod_path: file!().into(),
        children: vec![],
        routes: Vec::new(),
    }
        .add_route((RouteInfo::new("/helloworld", "get"), helloworld::get))
        .add_route((RouteInfo::new("/counter", "get"), counter::get))
        .add_route((RouteInfo::new("/contributing", "get"), contributing::get))
        .add_route((RouteInfo::new("/", "get"), index::get))
}
#[cfg(target_arch = "wasm32")]
pub fn collect() -> ClientIslandMountFuncs {
    ClientIslandMountFuncs::new(
        vec![
            ("/counter", Box::new(|| { #[allow(unused)] let tree_location_map =
            DomTarget::with(| dom | dom.tree_location_map().clone());
            beet::exports::ron::de::from_str:: < beet_site::components::counter::Counter
            > ("(initial:7)") ? .render().pipe(RegisterEffects::new(tree_location_map
            .rusty_locations[& RustyTracker::new(0u32, 16357251390072371795u64)])) ?;
            beet::exports::ron::de::from_str:: < beet_site::components::counter::Counter
            > ("(initial:7)") ? .render().pipe(RegisterEffects::new(tree_location_map
            .rusty_locations[& RustyTracker::new(1u32, 16357251390072371795u64)])) ?;
            Ok(()) })), ("/contributing", Box::new(|| { #[allow(unused)] let
            tree_location_map = DomTarget::with(| dom | dom.tree_location_map().clone());
            Ok(()) })), ("/helloworld", Box::new(|| { #[allow(unused)] let
            tree_location_map = DomTarget::with(| dom | dom.tree_location_map().clone());
            Ok(()) })), ("/", Box::new(|| { #[allow(unused)] let tree_location_map =
            DomTarget::with(| dom | dom.tree_location_map().clone());
            beet::exports::ron::de::from_str:: < beet_site::components::counter::Counter
            > ("(initial:2)") ? .render().pipe(RegisterEffects::new(tree_location_map
            .rusty_locations[& RustyTracker::new(2u32, 1934242216366192910u64)])) ?;
            Ok(()) }))
        ],
    )
}
