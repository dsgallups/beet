//! 🥁🥁🥁 This file has been auto generated by the Beet router.
//! 🥁🥁🥁 Any changes will be overridden if the file is regenerated.
pub mod contributing;
pub mod index;
pub const CONTRIBUTING: &'static str = "/contributing";
pub const INDEX: &'static str = "/";
use beet::prelude::*;
#[cfg(not(target_arch = "wasm32"))]
pub fn collect() -> RouteTree<beet::prelude::StaticRoute> {
    RouteTree {
        mod_path: std::path::PathBuf::from(file!()),
        children: vec![],
        routes: Vec::new(),
    }
        .add_route((RouteInfo::new("/contributing", "get"), contributing::get))
        .add_route((RouteInfo::new("/", "get"), index::get))
}
#[cfg(target_arch = "wasm32")]
pub fn collect() -> ClientIslandMap {
    ClientIslandMap {
        routes_mod_path: "crates/beet_site/src/routes/mod.rs".into(),
        map: vec![
            (RouteInfo::new("/contributing", "get"), vec![]), (RouteInfo::new("/",
            "get"), vec![ClientIsland { location : TreeLocation::new(94u32, 0u32, 14u32),
            type_name : "beet_site::routes::index::Counter".into(), ron : "(initial:7)"
            .into(), }])
        ]
            .into_iter()
            .collect(),
    }
}
